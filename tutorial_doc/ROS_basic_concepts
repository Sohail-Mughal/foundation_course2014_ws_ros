Topics:

ROS
examples
nodes
topics
 publisher
 subscriber
services
 server
 client

tf
visulization_tools
 rqt_graph
 rqt_plot
 rqt_reconfigure


 ROS-http://wiki.ros.org/roscpp/Overview
 http://wiki.ros.org/rospy/Overview

 Nodes
  - Initialization and Shutdown:
    -two levels of initialization
     -Initializing the node through a call to one of the ros::init() functions.
     -Starting the node is most often done through creation of a ros::NodeHandle.
  -Node handle
    It serves two puposes.
       Automatic Startup and Shutdown of the node.
       NodeHandles allows to specify a namespace.

  -Callbacks and Spinning (http://wiki.ros.org/roscpp/Overview/Callbacks%20and%20Spinning)
    -Single-threaded Spinning:spin and spinOnce
    -Multi-threaded Spinning: MultiThreadedSpinner and ros::AsyncSpinner

  -Time and Duration : http://wiki.ros.org/roscpp/Overview/Time
    - ROS has builtin time and duration primitive types
    - roslib provides as the ros::Time and ros::Duration classes
    - int32 sec and int32 nsec
    - ROS has the ability to setup a simulated Clock for nodes
       -ros::Time begin = ros::Time::now();
       - ros::Duration five_seconds(5.0);
    -Converting Time and Duration Instances
        -double secs =ros::Time::now().toSec()
        -ros::Duration d(0.5)
        -secs = d.toSec()
    -Time and Duration Arithmetic
   
   -Logging:
     - The five different verbosity levels are, in order:
            DEBUG,INFO,WARN,ERROR,FATAL 
     - There are four potential places a log message may end up, depending on the verbosity level
       stdout:DEBUG and INFO messages arrive on stdout
       stderr:WARN, ERROR and FATAL messages arrive on stderr
       Node log file : in ~/.ros/log
       /rosout topic 


 Messages
 Topics
 Custom Messages
 Services
 Server Clients

 Parameter Server:
 ros param
        The ROS Parameter Server can store strings, integers, floats, booleans, lists, dictionaries, iso8601 dates, and base64-encoded data. Dictionaries must have string keys.
    Getting parameters:
        rospy.get_param(param_name)
    Setting parameters:
        rospy.set_param(param_name, param_value)
    Parameter existence:
        rospy.has_param(param_name)
        rospy.delete_param(param_name)
    Searching for parameter keys:
        rospy.search_param(param_name)
    Getting parameter names
        rospy.get_param_names()
 ros action server
 ros tf



===========================================
Robot Operting System(ROS):
    ROS is an open-source, meta-operating system for your robot.
    It provides the services:
        hardware abstraction
        low-level device control, 
        implementation of commonly-used functionality, 
        message-passing between processes, 
        and package management.
    The ROS runtime "graph" is a peer-to-peer network of processes (potentially distributed across machines) that are loosely coupled using the ROS communication infrastructure.

    ROS implements several different styles of communication, including synchronous RPC-style communication over services, asynchronous streaming of data over topics, and storage of data on a Parameter Server.

    Language independence: the ROS framework is easy to implement in any modern programming language.
    We have already implemented it in Python, C++, and Lisp, and we have experimental libraries in Java and Lua.

    Easy testing: ROS has a builtin unit/integration test framework called rostest that makes it easy to bring up and tear down test fixtures. 

ROS concepts:
    ROS has three levels of concepts: the Filesystem level, the Computation Graph level, and the Community level.

    ROS Filesystem Level:
        The filesystem level concepts mainly cover ROS resources that you encounter on disk.
            Packages:
                Software in ROS is organized in packages.
                Packages are easy to create by hand or with tools like catkin_create_pkg.
                A package is the smallest individual thing you can build in ROS.

                Command-line Tools:
                    rospack: find and retrieve information about packages

                    catkin_create_pkg: create a new package

                    catkin_make: build a workspace of packages

                    rosdep: install system dependencies of a package 

                    roscd

            Metapackages
            Package Manifest
            Repositories
            Message
            Services

    ROS Computation Graph Level:
        Computation Graph is the peer-to-peer network of ROS processes that are processing data together.
        The basic Computation Graph concepts of ROS are nodes, Master, Parameter Server, messages, services, topics, and bags, all of which provide data to the Graph in different ways.

        These concepts are implemented in the ros_comm repository.

        Nodes:  Nodes are processes that perform computation.
        Master: The ROS Master provides name registration and lookup to the rest of the Computation Graph.
        Parameter Server: The Parameter Server allows data to be stored by key in a central location.
       
        Messages: Nodes communicate with each other by passing messages. 
        Topics: Messages are routed via a transport system with publish / subscribe semantics.topic as a strongly typed message bus. Each bus has a name, and anyone can connect to the bus to send or receive messages as long as they are the right type.

        Services: The publish / subscribe model is a very flexible communication paradigm, but its many-to-many, one-way transport is not appropriate for request / reply interactions, which are often required in a distributed system. Request / reply is done via services, which are defined by a pair of message structures: one for the request and one for the reply. A providing node offers a service under a name and a client uses the service by sending the request message and awaiting the reply. ROS client libraries generally present this interaction to the programmer as if it were a remote procedure call. 
        
        Bags: Bags are a format for saving and playing back ROS message data. Bags are an important mechanism for storing data, such as sensor data, that can be difficult to collect but is necessary for developing and testing algorithms. 

        ROS Master:
        The ROS Master acts as a nameservice in the ROS Computation Graph. It stores topics and services registration information for ROS nodes. Nodes communicate with the Master to report their registration information. As these nodes communicate with the Master, they can receive information about other registered nodes and make connections as appropriate. The Master will also make callbacks to these nodes when this registration information changes, which allows nodes to dynamically create connections as new nodes are run.


        Nodes connect to other nodes directly; the Master only provides lookup information, much like a DNS server. Nodes that subscribe to a topic will request connections from nodes that publish that topic, and will establish that connection over an agreed upon connection protocol. The most common protocol used in a ROS is called TCPROS, which uses standard TCP/IP sockets.

        This architecture allows for decoupled operation, where the names are the primary means by which larger and more complex systems can be built. Names have a very important role in ROS: nodes, topics, services, and parameters all have names. Every ROS client library supports command-line remapping of names, which means a compiled program can be reconfigured at runtime to operate in a different Computation Graph topology. 



<export>
   <metapackage />
 </export>

 catkin_metapackage()


















